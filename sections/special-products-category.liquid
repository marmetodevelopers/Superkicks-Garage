{{ 'component-card.css' | asset_url | stylesheet_tag }}
{{ 'component-price.css' | asset_url | stylesheet_tag }}

<link rel="stylesheet" href="{{ 'component-slider.css' | asset_url }}" media="print" onload="this.media='all'">
<link rel="stylesheet" href="{{ 'template-collection.css' | asset_url }}" media="print" onload="this.media='all'">
<noscript>{{ 'component-slider.css' | asset_url | stylesheet_tag }}</noscript>
<noscript>{{ 'template-collection.css' | asset_url | stylesheet_tag }}</noscript>

<div class="live-products-container page-width">
  {% if section.settings.live_heading != blank %}
    <div class="live-products-heading">{{ section.settings.live_heading }}</div>
  {% endif %} 
  <div class="live_product-container {{ section.settings.live_heading | handleize }} grid grid--3-col-desktop grid--2-col js-container-hide">
    {% for product in collection.products %}
      
        {% for tag in product.tags %}
          {% if tag contains "Startdate__" %}
            {% assign now = "now" | date: "%s" | times:1 %}
            {% assign startDate = tag | split: "Startdate__" | last | date: "%s" | times:1 %}
            {% assign productstartDate = tag | split: "Startdate__" | last  %}
          {% endif %}
          {% if tag contains "Enddate__" %}
            {% assign endDate = tag | split: "Enddate__" | last | date: "%s" | times:1 %}
            {% assign productendDate = tag | split: "Enddate__" | last %}
          {% endif %}
        {% endfor %}
        {% if startDate != blank and endDate != blank %}
          {% if now >= startDate and now < endDate %}
            <div class="product--card product--card-container grid__item " data-startDate="{{ productstartDate }}" data-endDate="{{ productendDate }}">
              {% render 'card-product',
                card_product: product,
                media_aspect_ratio: 'portrait',
                show_secondary_image: true,
                show_vendor: true,
                section_id: section.id,
                enable_date: true
              %}
            </div>
          {% endif %}
        {% endif %}

    {% endfor %}
  </div>
</div>

<div class="upcoming-products-container page-width">
  {% if section.settings.heading != blank %}
    <div class="upcoming-products-heading">{{ section.settings.heading }}</div>
  {% endif %}
  <div class="upcoming_product-container {{ section.settings.heading | handleize }}  grid grid--3-col-desktop grid--2-col js-container-hide">
    {% for product in collection.products %}
      
        {% for tag in product.tags %}
          {% if tag contains "Startdate__" %}
            {% assign now = "now" | date: "%s" | times:1 %}
            {% assign startDate = tag | split: "Startdate__" | last | date: "%s" | times:1 %}
            {% assign productstartDate = tag | split: "Startdate__" | last  %}
          {% endif %}
          {% if tag contains "Enddate__" %}
            {% assign endDate = tag | split: "Enddate__" | last | date: "%s" | times:1 %}
            {% assign productendDate = tag | split: "Enddate__" | last %}
          {% endif %}
        {% endfor %}
        {% if startDate != blank and endDate != blank %}
          {% if now < startDate %}
            <div class="product--card product--card-container grid__item " data-sort="{{ startDate }}" data-startDate="{{ productstartDate }}" data-endDate="{{ productendDate }}">
              {% render 'card-product',
                card_product: product,
                media_aspect_ratio: 'portrait',
                show_secondary_image: true,
                show_vendor: true,
                section_id: section.id,
                enable_date: true
              %}
            </div>
        {% endif %}
        {% endif %}
      
    {% endfor %}
  </div>
</div>


<div class="past-products-container page-width">
  {% if section.settings.heading2 != blank %}
    <div class="past-products-heading">{{ section.settings.heading2 }}</div>
  {% endif %}
  <div class="past_product-container {{ section.settings.heading2 | handleize }} grid grid--3-col-desktop grid--2-col js-container-hide">
    {% for product in collection.products %}
      
        {% for tag in product.tags %}
          {% if tag contains "Startdate__" %}
            {% assign now = "now" | date: "%s" | times:1 %}
            {% assign startDate = tag | split: "Startdate__" | last | date: "%s" | times:1 %}
             {% assign productstartDate = tag | split: "Startdate__" | last  %}
          {% endif %}
          {% if tag contains "Enddate__" %}
            {% assign endDate = tag | split: "Enddate__" | last | date: "%s" | times:1 %}
            {% assign productendDate = tag | split: "Enddate__" | last %}
          {% endif %}
        {% endfor %}
        {% if startDate != blank and endDate != blank %}
          {% if now > endDate  %}
            <div class="product--card product--card-container grid__item "  data-startDate="{{ productstartDate }}" data-endDate="{{ productendDate }}">
              {% render 'card-product',
                card_product: product,
                media_aspect_ratio: 'portrait',
                show_secondary_image: true,
                show_vendor: true,
                section_id: section.id,
                enable_date: false,
                raffle_ended: true
              %}
            </div>
          {% endif %}
        {% endif %}
      
    {% endfor %}
  </div>
</div>


<script>

window.addEventListener("DOMContentLoaded",function(){

  //sorting the upcoming product based on start date
  let card =document.querySelectorAll("[data-sort]");
  var array = [];
  card.forEach((productCard)=>{
      array.push(productCard.getAttribute("data-sort"));
  });
  let sortedValue = array.sort();
  let sortedProductCard = [];
  sortedValue.forEach((value)=>{
      document.querySelector(".{{ section.settings.heading | handleize }}").append(document.querySelector(`[data-sort="${value}"]`));
      sortedProductCard.push(document.querySelector(`[data-sort="${value}"]`));
  });

  //for future products
  let futureContainer = document.querySelector(".{{ section.settings.heading | handleize }}");
  let futureproductCard = futureContainer.querySelectorAll(".product--card");
  
  futureproductCard.forEach(card => {
    let startDate = card.getAttribute("data-startDate");
    let EndDate = card.getAttribute("data-endDate");

    // Getting the date
    let date = new Date(startDate).getDate();

    // Getting Month as anitials
    //let month = startDate.toString().split(' ')[1];
    let monthObject = new Date(startDate);
    
    // Define an array of month names in abbreviated form
    var monthNames = [
      "Jan", "Feb", "Mar", "Apr",
      "May", "Jun", "Jul", "Aug",
      "Sep", "Oct", "Nov", "Dec"
    ];

    // Extract the month from the Date object (0-based index)
    var monthIndex = monthObject.getMonth();
    
    // Get the abbreviated month name from the array
    var abbreviatedMonth = monthNames[monthIndex];
    
    if(card.querySelector('.release-date')){
      card.querySelector(".release-date").style.display = "flex";
      card.querySelector('.first-tag').innerHTML = abbreviatedMonth;
      card.querySelector('.second-tag').innerHTML = date;
    }
  })

 //for past products
  let pastContainer = document.querySelector(".{{ section.settings.heading2 | handleize }}");
  let pastproductCard = pastContainer.querySelectorAll(".product--card");
  pastproductCard.forEach(card => {
    let startDate = card.getAttribute("data-startDate");
    let EndDate = card.getAttribute("data-endDate");
    let month = EndDate.toString().split(' ')[1];
    let date = new Date(EndDate).getDate();
    if(card.querySelector('.release-date')){
      card.querySelector(".release-date").style.display = "flex";
      if(card.querySelector('.first-tag')){
        card.querySelector('.first-tag').innerHTML = month;
        card.querySelector('.second-tag').innerHTML = date;
      }
    }
  })
  
  //for present products
  let presentContainer = document.querySelector(".{{ section.settings.live_heading | handleize }}");
  let presentproductCard = presentContainer.querySelectorAll(".product--card");
  
  presentproductCard.forEach(card => {
    let startDate = card.getAttribute("data-startDate");
    let EndDate = card.getAttribute("data-endDate");
    let month = EndDate.toString().split(' ')[1];
    let date = new Date(EndDate).getDate();
    if(card.querySelector(".product__sale-timer")){
      card.querySelector(".product__sale-timer").style.display = "block";
    }
    setInterval(function() { makeTimer(card,EndDate); }, 1000);
  });
  
  function makeTimer(parsedCard,enddate) { 
      var saleEndTime = (Date.parse(enddate) / 1000);
      var now = new Date();
      now = (Date.parse(now) / 1000);           
      var timeLeft = saleEndTime - now;
      if(timeLeft > 0){
        var days = Math.floor(timeLeft / 86400); 
        var hours = Math.floor((timeLeft - (days * 86400)) / 3600);
        var minutes = Math.floor((timeLeft - (days * 86400) - (hours * 3600 )) / 60);
        var seconds = Math.floor((timeLeft - (days * 86400) - (hours * 3600) - (minutes * 60)));
        if(parsedCard.querySelector(".js-sale-days")){
          parsedCard.querySelector(".js-sale-days").innerHTML = days + 'd';
          parsedCard.querySelector(".js-sale-hours").innerHTML = hours + 'h';
          parsedCard.querySelector(".js-sale-minutes").innerHTML = minutes + 'm';
          parsedCard.querySelector(".js-sale-secs").innerHTML = seconds + 's';
        }
      } else {
    
        parsedCard.querySelector('.product__sale-timer').style.display = "none";
        parsedCard.querySelector('.release-date').style.display = "flex";
      }
  }

  //removing container is products are not there
  let div = document.querySelectorAll(".js-container-hide");
  console.log(div);
  
  div.forEach((container)=>{
  if(container.childElementCount == 0){
      console.log(container.previousElementSibling);
      container.previousElementSibling.style.display = "none";
  }
  });
//   function applyflickity(){
//     let flickityContainer = document.querySelector('.{{ section.settings.heading | handleize }}');
//     let cardCount = flickityContainer.querySelectorAll(".product--card").length;
//     if(window.innerWidth > 767){
//       if(cardCount > 3){
//       let flkty = new Flickity( '.upcoming_product-container',{cellAlign: 'center',contain: true, groupCells: 1 ,arrowShape: { 
//             x0: 20,
//             x1: 55, y1: 40,
//             x2: 60, y2: 35,
//             x3: 30
//           }});
//       } else {
//        flickityContainer.style.display = "flex";
//       }
//     } 
//     // flickity for mobile
//     if(window.innerWidth < 767){
//       if(cardCount > 2){
//       let flkty = new Flickity( '.upcoming_product-container',{cellAlign: 'center',contain: true, groupCells: 1 ,arrowShape: { 
//             x0: 20,
//             x1: 55, y1: 40,
//             x2: 60, y2: 35,
//             x3: 30
//           }});
//       } else {
//           flickityContainer.style.display = "flex";
//       }
//     }
//   }
// setTimeout(function(){
//   applyflickity();
// },1000);
});
 
</script>

{% schema %}
{
  "name": "New release Products",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Upcoming drops ",
      "default": "UPCOMING DROPS"
    },
    {
      "type": "text",
      "id": "heading2",
      "label": "Past drops",
      "default": "PAST DROPS"
    },
    {
      "type": "text",
      "id": "live_heading",
      "label": "Live drops ",
      "default": "LIVE DROPS"
    }
  ],
  "presets": [
    {
      "name": "new release Products"
    }
  ]
}
{% endschema %}